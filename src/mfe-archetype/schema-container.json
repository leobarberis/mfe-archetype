{
    "$schema": "http://json-schema.org/schema",
    "$id": "mfe-archetype-container",
    "title": "build container",
    "type": "object",
    "description": "Build container with MFE",
    "properties": {
      "name": {
        "type": "string",
        "description": "The name of the mfe project",
        "$default": {
          "$source": "argv",
          "index": 0
        },
        "x-prompt": "What is your mfe project name?"
      },
      "fw": {
        "type": "string",
        "description": "Base MFE framework",
        "$default": {
          "$source": "argv",
          "index": 3
        },
        "enum": ["angular", "react"],
        "x-prompt": {
          "message": "Which framework does your MFE use?",
          "type:": "list",
          "items": [
            { "value": "angular", "label": "angular" },
            { "value": "react", "label": "react" }
          ]
        }
      },
      "routing": {
        "type": "boolean",
        "$default": {
          "$source": "argv",
          "index": 2
        },
        "description": "Whether your MFE uses inner navigation or not",
        "x-prompt": {
          "message": "Does your MFE use inner navigation?",
          "type": "confirmation"
        }
      },
      "port": {
        "type": "string",
        "$default": {
          "$source": "argv",
          "index": 1
        },
        "default": "3000",
        "x-prompt": {
          "message": "Which port does your MFE use for development?",
          "type": "input"
        }
      },
      "env": {
        "type": "string",
        "default": "dev",
        "description": "Container build environment",
        "enum": ["dev", "prod"],
        "x-prompt": {
          "message": "Select the build environment",
          "type:": "list",
          "items": [
            { "value": "dev", "label": "dev" },
            { "value": "prod", "label": "prod" }
          ]
        }
      }
    },
    "required": ["name", "fw", "routing", "port", "env"],
    "additionalProperties": false
  }
  